/*
 * Automatically generated by preplate
 */
goog.provide('lc.data.model.Race');

goog.require('lc');

goog.require('goog.json');

goog.require('prestans.types.Model.EventType');
goog.require('prestans.types.Model.AttributeChangedEvent');

goog.require('prestans.types.Model');

goog.require('prestans.types.String');
goog.require('lc.data.filter.Race');

/**
 * @constructor
 * @extends {prestans.types.Model}
 * @param {Object=} opt_json
 * @param {boolean=} opt_minified
*/
lc.data.model.Race = function(opt_json, opt_minified) {

    //Setup base model
    prestans.types.Model.call(this);

    if(goog.isDef(opt_minified) && goog.isBoolean(opt_minified) && opt_minified && goog.isDefAndNotNull(opt_json)) {
        this.id_ = new prestans.types.String({value: opt_json[lc.data.model.Race.REWRITE_MAP["id"]], required: false, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
        this.name_ = new prestans.types.String({value: opt_json[lc.data.model.Race.REWRITE_MAP["name"]], required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
    }
    else if(goog.isDefAndNotNull(opt_json)) {
        this.id_ = new prestans.types.String({value: opt_json["id"], required: false, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
        this.name_ = new prestans.types.String({value: opt_json["name"], required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
    }
    else {
        this.id_ = new prestans.types.String({required: false, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null});
        this.name_ = new prestans.types.String({required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null});
    }

    //listen for array events
    
};
goog.inherits(lc.data.model.Race, prestans.types.Model);

lc.data.model.Race.Meta = {
    Id: {
        REQUIRED: false,
        DEFAULT: null,
        MAX_LENGTH: null,
        MIN_LENGTH: null,
        FORMAT: null,
        CHOICES: null
    },
    Name: {
        REQUIRED: true,
        DEFAULT: null,
        MAX_LENGTH: null,
        MIN_LENGTH: null,
        FORMAT: null,
        CHOICES: null
    }
};

//Rewrite map
lc.data.model.Race.REWRITE_MAP = {
    "id": "a",
    "name": "b"
};

//Reverse rewrite map
lc.data.model.Race.REVERSE_REWRITE_MAP = {
    "a": "id",
    "b": "name"
};

lc.data.model.Race.prototype.getId = function() {
    return this.id_.getValue();
};

lc.data.model.Race.prototype.setId = function(value) {
    var previousValue_ = this.id_.getValue();
    var success_ = this.id_.setValue(value);
    this.dispatchAttributeChangedEvent_("id", previousValue_, this.id_.getValue());
    return success_;
};



lc.data.model.Race.prototype.getName = function() {
    return this.name_.getValue();
};

lc.data.model.Race.prototype.setName = function(value) {
    var previousValue_ = this.name_.getValue();
    var success_ = this.name_.setValue(value);
    this.dispatchAttributeChangedEvent_("name", previousValue_, this.name_.getValue());
    return success_;
};



lc.data.model.Race.prototype.setValueForKey = function(key, value) {

    var returnVal_ = null;

    switch(key)
    {
        case "id":
            returnVal_ = this.setId(value);
            break;
        case "name":
            returnVal_ = this.setName(value);
            break;
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};

lc.data.model.Race.prototype.getValueForKey = function(key) {

    var returnVal_ = null;

    switch(key)
    {
        case "id":
            returnVal_ = this.getId();
            break;
        case "name":
            returnVal_ = this.getName();
            break;
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};

lc.data.model.Race.prototype.clone = function(opt_filter) {
    var json_ = this.getJSONObject(false, opt_filter);
    return new lc.data.model.Race(json_, false);
};

/**
 * @param {boolean} minified
 * @param {lc.data.filter.Race=} opt_filter
 */
lc.data.model.Race.prototype.getJSONObject = function(minified, opt_filter) {

    //check that filter is of correct type
    if(goog.isDefAndNotNull(opt_filter) && !(opt_filter instanceof lc.data.filter.Race))
        throw "Incorrect filter for this model";
    
    var jsonifiedObject_ = {};
    
    if(goog.isDef(minified) && goog.isBoolean(minified) && minified) {
                if(goog.isDef(opt_filter) && opt_filter.getId())
            jsonifiedObject_[lc.data.model.Race.REWRITE_MAP["id"]] = this.getId()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_[lc.data.model.Race.REWRITE_MAP["id"]] = this.getId()
                    if(goog.isDef(opt_filter) && opt_filter.getName())
            jsonifiedObject_[lc.data.model.Race.REWRITE_MAP["name"]] = this.getName()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_[lc.data.model.Race.REWRITE_MAP["name"]] = this.getName()
            }
    else {
                if(goog.isDef(opt_filter) && opt_filter.getId())
            jsonifiedObject_["id"] = this.getId()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_["id"] = this.getId()
                    if(goog.isDef(opt_filter) && opt_filter.getName())
            jsonifiedObject_["name"] = this.getName()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_["name"] = this.getName()
            }

    return jsonifiedObject_;
};

/**
 * @export
 * @param {boolean} minified
 * @param {lc.data.filter.Race=} opt_filter
 */
lc.data.model.Race.prototype.getJSONString = function(minified, opt_filter) {
    return goog.json.serialize(this.getJSONObject(minified, opt_filter));
};